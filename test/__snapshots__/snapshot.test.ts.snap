// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test snapshot of examples all props 1`] = `
Object {
  "Outputs": Object {
    "LowCostECSClusterName647E1020": Object {
      "Value": Object {
        "Ref": "ClusterEB0386A7",
      },
    },
    "LowCostECSPublicIpAddressA02E4592": Object {
      "Value": Object {
        "Ref": "LowCostECSHostInstanceIp2CB96CE8",
      },
    },
    "LowCostECSServiceNameB1505605": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSService95E677AB",
          "Name",
        ],
      },
    },
    "LowCostECSStateMachineName718AB644": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSStateMachine236A22ED",
          "Name",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterHostInstanceCapacityASG6B791030": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterHostInstanceCapacityLaunchConfig812B5EE6",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
          },
          Object {
            "Ref": "VpcPublicSubnet2Subnet691E08A3",
          },
          Object {
            "Ref": "VpcPublicSubnet3SubnetBE12F0B6",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(dict(event, ResponseURL='...')))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)

  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  """Turn an instance ID into a container instance ARN."""
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  """Fetch tasks for a container instance ARN."""
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  """Return True if the instance is running tasks for the given cluster."""
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']

  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']

  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  """Pick a subset of a dict."""
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionAllowInvokeTestStackClusterHostInstanceCapacityLifecycleHookDrainHookTopicF2E65AC531E91D26": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:test-region:test-account:autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterHostInstanceCapacityASG6B791030",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionTopic0973DF5F": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterHostInstanceCapacityInstanceProfileD7C1621F": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterHostInstanceCapacityInstanceRole2FB29380": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityLaunchConfig812B5EE6": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "ClusterHostInstanceCapacityInstanceRole2FB29380",
      ],
      "Properties": Object {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": Object {
          "Ref": "ClusterHostInstanceCapacityInstanceProfileD7C1621F",
        },
        "ImageId": "dummy-value-for-/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
        "InstanceType": "t3.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
              "GroupId",
            ],
          },
          "test-sg-id",
        ],
        "SpotPrice": "0.010",
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
INSTANCE_ID=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)
ALLOCATION_ID=$(docker run --net=host amazon/aws-cli:testTag ec2 describe-addresses --region test-region --filter Name=tag:Name,Values=TestStackLowCostECSHostInstanceIpCECE5013 --query 'Addresses[].AllocationId' --output text | head)
docker run --net=host amazon/aws-cli:testTag ec2 associate-address --region test-region --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID" --allow-reassociation",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHook6243850B": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterHostInstanceCapacityASG6B791030",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "LogGroupPolicyResourcePolicy6FA18555": Object {
      "Properties": Object {
        "PolicyDocument": "{"Statement":[{"Action":["logs:CreateLogStream","logs:PutLogEvents"],"Effect":"Allow","Principal":{"AWS":"test-account"},"Resource":"arn:aws:logs:region:account-id:log-group:test:*"},{"Action":["logs:CreateLogStream","logs:PutLogEvents"],"Effect":"Allow","Principal":{"AWS":"test-account"},"Resource":"arn:aws:logs:region:account-id:log-group:test:*"}],"Version":"2012-10-17"}",
        "PolicyName": "TestStackLogGroupPolicy48BAD2C5",
      },
      "Type": "AWS::Logs::ResourcePolicy",
    },
    "LowCostECSARecordtest1rajyannet97B482C0": Object {
      "Properties": Object {
        "HostedZoneId": "DUMMY",
        "Name": "test1.rajyan.net.",
        "ResourceRecords": Array [
          Object {
            "Ref": "LowCostECSHostInstanceIp2CB96CE8",
          },
        ],
        "TTL": "1800",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "LowCostECSARecordtest2rajyannet8F8185B4": Object {
      "Properties": Object {
        "HostedZoneId": "DUMMY",
        "Name": "test2.rajyan.net.",
        "ResourceRecords": Array [
          Object {
            "Ref": "LowCostECSHostInstanceIp2CB96CE8",
          },
        ],
        "TTL": "1800",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "LowCostECSCertbotScheduleRule604ECD25": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(10 days)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "LowCostECSStateMachine236A22ED",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "LowCostECSStateMachineEventsRoleAB571CF6",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LowCostECSCertbotTaskDefinitionAD2990AC": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "certonly",
              "--verbose",
              "--preferred-challenges=dns-01",
              "--dns-route53",
              "--dns-route53-propagation-seconds=300",
              "--non-interactive",
              "--agree-tos",
              "--expand",
              "-m",
              "kitakita7617@gmail.com",
              "--cert-name",
              "test1.rajyan.net",
              "-d",
              "test1.rajyan.net",
              "-d",
              "test2.rajyan.net",
            ],
            "Essential": true,
            "Image": "certbot/dns-route53:testTag",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": "test",
                "awslogs-region": "region",
                "awslogs-stream-prefix": "testTag",
              },
            },
            "MemoryReservation": 64,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": false,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "certbot",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSCertbotTaskDefinition977C5973",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:region:account-id:log-group:test:*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "route53:ListHostedZones",
                "route53:GetChange",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:ChangeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
            Object {
              "Action": "elasticfilesystem:ClientWrite",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSEmailSubscription5C24A57F": Object {
      "Properties": Object {
        "Endpoint": "kitakita7617@gmail.com",
        "Protocol": "email",
        "TopicArn": Object {
          "Ref": "LowCostECSTopicE71E72ED",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "LowCostECSFileSystem847967FC": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "Encrypted": true,
        "FileSystemTags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/LowCostECS/FileSystem",
          },
        ],
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Retain",
    },
    "LowCostECSFileSystemEfsMountTarget1BBA308EB": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget2D5EF7BBC": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget3A37833C2": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet3SubnetF258B56E",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemSecurityGroup7C1A7991": Object {
      "Properties": Object {
        "GroupDescription": "TestStack/LowCostECS/FileSystemSecurityGroup",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LowCostECSFileSystemSecurityGroupfromTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049FDC55036": Object {
      "Properties": Object {
        "Description": "from TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "LowCostECSFileSystemSecurityGrouptoTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049E8C52016": Object {
      "Properties": Object {
        "Description": "to TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LowCostECSHostInstanceIp2CB96CE8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStackLowCostECSHostInstanceIpCECE5013",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "LowCostECSServerTaskDefinitionD959764E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "COMPLETE",
                "ContainerName": "aws-cli",
              },
            ],
            "Essential": true,
            "Image": "test-image",
            "Memory": 32,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": true,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "test-container",
            "PortMappings": Array [
              Object {
                "ContainerPort": 80,
                "HostPort": 80,
                "Protocol": "tcp",
              },
            ],
          },
          Object {
            "Command": Array [
              Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "set -eux
          aws configure set region test-region && \\
          aws configure set output text && \\
          EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn ",
                    Object {
                      "Ref": "LowCostECSStateMachine236A22ED",
                    },
                    " --query executionArn) && \\
          until [ $(aws stepfunctions describe-execution --execution-arn "$EXECUTION_ARN" --query status) != RUNNING ];
          do
            echo "Waiting for $EXECUTION_ARN"
            sleep 10
          done",
                  ],
                ],
              },
            ],
            "EntryPoint": Array [
              "/bin/bash",
              "-c",
            ],
            "Essential": false,
            "Image": "amazon/aws-cli:testTag",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": "test",
                "awslogs-region": "region",
                "awslogs-stream-prefix": "testTag",
              },
            },
            "MemoryReservation": 64,
            "Name": "aws-cli",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSServerTaskDefinition35240CEA",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionTaskRole53DB453D",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "Name": "test-volume",
          },
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSServerTaskDefinitionExecutionRole56B544B3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:region:account-id:log-group:test:*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSServerTaskDefinitionTaskRole53DB453D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "elasticfilesystem:ClientMount",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "states:DescribeExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:test-region:test-account:execution:",
                    Object {
                      "Fn::Select": Array [
                        6,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSStateMachine236A22ED",
                            },
                          ],
                        },
                      ],
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
            Object {
              "Action": Array [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionTaskRole53DB453D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSService95E677AB": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "LaunchType": "EC2",
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": Object {
          "Ref": "LowCostECSServerTaskDefinitionD959764E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "LowCostECSStateMachine236A22ED": Object {
      "DependsOn": Array [
        "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "LowCostECSStateMachineRole6D7317FD",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{"StartAt":"CreateCertificate","States":{"CreateCertificate":{"End":true,"Retry":[{"ErrorEquals":["States.ALL"],"IntervalSeconds":20}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"SendEmailOnFailure"}],"Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::ecs:runTask.sync","Parameters":{"Cluster":"",
              Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
              "","TaskDefinition":"TestStackLowCostECSCertbotTaskDefinition977C5973","LaunchType":"EC2"}},"SendEmailOnFailure":{"Next":"Fail","Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
              "","Message.$":"$"}},"Fail":{"Type":"Fail"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSStateMachineRole6D7317FD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "LowCostECSStateMachineEventsRoleAB571CF6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineEventsRoleDefaultPolicy71755946": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineEventsRoleDefaultPolicy71755946",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineEventsRoleAB571CF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSStateMachineRole6D7317FD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.test-region.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineRoleDefaultPolicy7D009A46": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        2,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        4,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        0,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    "/",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:StopTask",
                "ecs:DescribeTasks",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
                    "Arn",
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:test-region:test-account:rule/StepFunctionsGetEventsForECSTaskRule",
                  ],
                ],
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineRole6D7317FD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSTopicE71E72ED": Object {
      "Type": "AWS::SNS::Topic",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.96.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.128.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet3DefaultRoute94B74F0D": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VpcPublicSubnet3NATGateway7640CD1D",
        },
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet3RouteTableD98824C7",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet3RouteTableAssociation16BDDC43": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPrivateSubnet3RouteTableD98824C7",
        },
        "SubnetId": Object {
          "Ref": "VpcPrivateSubnet3SubnetF258B56E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet3RouteTableD98824C7": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet3SubnetF258B56E": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.160.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PrivateSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.32.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet3DefaultRoute4697774F": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet3RouteTable93458DBB",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet3EIP3A666A23": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet3",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet3NATGateway7640CD1D": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VpcPublicSubnet3EIP3A666A23",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet3SubnetBE12F0B6",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet3",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet3RouteTable93458DBB": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet3RouteTableAssociation1F1EDF02": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnet3RouteTable93458DBB",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnet3SubnetBE12F0B6",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet3SubnetBE12F0B6": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.64.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Test snapshot of examples autoscaling 1`] = `
Object {
  "Outputs": Object {
    "LowCostECSClusterName647E1020": Object {
      "Value": Object {
        "Ref": "ClusterEB0386A7",
      },
    },
    "LowCostECSPublicIpAddressA02E4592": Object {
      "Value": Object {
        "Ref": "LowCostECSHostInstanceIp2CB96CE8",
      },
    },
    "LowCostECSServiceNameB1505605": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSService95E677AB",
          "Name",
        ],
      },
    },
    "LowCostECSStateMachineName718AB644": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSStateMachine236A22ED",
          "Name",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ClusterEB0386A7": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterHostInstanceCapacityASG6B791030": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterHostInstanceCapacityLaunchConfig812B5EE6",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
          },
          Object {
            "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
          },
          Object {
            "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(dict(event, ResponseURL='...')))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)

  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  """Turn an instance ID into a container instance ARN."""
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  """Fetch tasks for a container instance ARN."""
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  """Return True if the instance is running tasks for the given cluster."""
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']

  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']

  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  """Pick a subset of a dict."""
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionAllowInvokeTestStackClusterHostInstanceCapacityLifecycleHookDrainHookTopicF2E65AC531E91D26": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:test-region:test-account:autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterHostInstanceCapacityASG6B791030",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionTopic0973DF5F": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterHostInstanceCapacityInstanceProfileD7C1621F": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterHostInstanceCapacityInstanceRole2FB29380": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF": Object {
      "Properties": Object {
        "GroupDescription": "TestStack/Cluster/HostInstanceCapacity/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          Object {
            "CidrIpv6": "::/0",
            "Description": "from ::/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIpv6": "::/0",
            "Description": "from ::/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterHostInstanceCapacityInstanceSecurityGroupfromTestStackLowCostECSFileSystemSecurityGroup3BACAC07204908F72F6E": Object {
      "Properties": Object {
        "Description": "from TestStackLowCostECSFileSystemSecurityGroup3BACAC07:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ClusterHostInstanceCapacityLaunchConfig812B5EE6": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "ClusterHostInstanceCapacityInstanceRole2FB29380",
      ],
      "Properties": Object {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": Object {
          "Ref": "ClusterHostInstanceCapacityInstanceProfileD7C1621F",
        },
        "ImageId": "dummy-value-for-/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
        "InstanceType": "t2.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
              "GroupId",
            ],
          },
        ],
        "SpotPrice": "0.0050",
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
INSTANCE_ID=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)
ALLOCATION_ID=$(docker run --net=host amazon/aws-cli:latest ec2 describe-addresses --region test-region --filter Name=tag:Name,Values=TestStackLowCostECSHostInstanceIpCECE5013 --query 'Addresses[].AllocationId' --output text | head)
docker run --net=host amazon/aws-cli:latest ec2 associate-address --region test-region --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID" --allow-reassociation",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHook6243850B": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterHostInstanceCapacityASG6B791030",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "ClusterHostInstanceCapacityScheduledActionDecreaseAtNight1023BED2": Object {
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterHostInstanceCapacityASG6B791030",
        },
        "DesiredCapacity": 0,
        "Recurrence": "0 23 * * *",
        "TimeZone": "Asia/Tokyo",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "ClusterHostInstanceCapacityScheduledActionIncreaseAtMorningE903155F": Object {
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterHostInstanceCapacityASG6B791030",
        },
        "DesiredCapacity": 1,
        "Recurrence": "0 8 * * *",
        "TimeZone": "Asia/Tokyo",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "LowCostECSARecordtest1rajyannet97B482C0": Object {
      "Properties": Object {
        "HostedZoneId": "DUMMY",
        "Name": "test1.rajyan.net.",
        "ResourceRecords": Array [
          Object {
            "Ref": "LowCostECSHostInstanceIp2CB96CE8",
          },
        ],
        "TTL": "1800",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "LowCostECSARecordtest2rajyannet8F8185B4": Object {
      "Properties": Object {
        "HostedZoneId": "DUMMY",
        "Name": "test2.rajyan.net.",
        "ResourceRecords": Array [
          Object {
            "Ref": "LowCostECSHostInstanceIp2CB96CE8",
          },
        ],
        "TTL": "1800",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "LowCostECSCertbotScheduleRule604ECD25": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(60 days)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "LowCostECSStateMachine236A22ED",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "LowCostECSStateMachineEventsRoleAB571CF6",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LowCostECSCertbotTaskDefinitionAD2990AC": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "certonly",
              "--verbose",
              "--preferred-challenges=dns-01",
              "--dns-route53",
              "--dns-route53-propagation-seconds=300",
              "--non-interactive",
              "--agree-tos",
              "--expand",
              "-m",
              "kitakita7617@gmail.com",
              "--cert-name",
              "test1.rajyan.net",
              "-d",
              "test1.rajyan.net",
              "-d",
              "test2.rajyan.net",
            ],
            "Essential": true,
            "Image": "certbot/dns-route53:v1.29.0",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "v1.29.0",
              },
            },
            "MemoryReservation": 64,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": false,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "certbot",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSCertbotTaskDefinition977C5973",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSLogGroup73926EAE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "route53:ListHostedZones",
                "route53:GetChange",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:ChangeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
            Object {
              "Action": "elasticfilesystem:ClientWrite",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSEmailSubscription5C24A57F": Object {
      "Properties": Object {
        "Endpoint": "kitakita7617@gmail.com",
        "Protocol": "email",
        "TopicArn": Object {
          "Ref": "LowCostECSTopicE71E72ED",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "LowCostECSFileSystem847967FC": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Encrypted": true,
        "FileSystemTags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/LowCostECS/FileSystem",
          },
        ],
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Delete",
    },
    "LowCostECSFileSystemEfsMountTarget1BBA308EB": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget2D5EF7BBC": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget3A37833C2": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemSecurityGroup7C1A7991": Object {
      "Properties": Object {
        "GroupDescription": "TestStack/LowCostECS/FileSystemSecurityGroup",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LowCostECSFileSystemSecurityGroupfromTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049FDC55036": Object {
      "Properties": Object {
        "Description": "from TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "LowCostECSFileSystemSecurityGrouptoTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049E8C52016": Object {
      "Properties": Object {
        "Description": "to TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LowCostECSHostInstanceIp2CB96CE8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStackLowCostECSHostInstanceIpCECE5013",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "LowCostECSLogGroup73926EAE": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "LowCostECSServerTaskDefinitionD959764E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "COMPLETE",
                "ContainerName": "aws-cli",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "SERVER_NAME",
                "Value": "test1.rajyan.net test2.rajyan.net",
              },
              Object {
                "Name": "CERT_NAME",
                "Value": "test1.rajyan.net",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Sub": "test-account.dkr.ecr.test-region.\${AWS::URLSuffix}/cdk-hnb659fds-[HASH REMOVED]",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "sample",
              },
            },
            "MemoryReservation": 64,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": true,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "nginx",
            "PortMappings": Array [
              Object {
                "ContainerPort": 80,
                "HostPort": 80,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 443,
                "HostPort": 443,
                "Protocol": "tcp",
              },
            ],
          },
          Object {
            "Command": Array [
              Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "set -eux
          aws configure set region test-region && \\
          aws configure set output text && \\
          EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn ",
                    Object {
                      "Ref": "LowCostECSStateMachine236A22ED",
                    },
                    " --query executionArn) && \\
          until [ $(aws stepfunctions describe-execution --execution-arn "$EXECUTION_ARN" --query status) != RUNNING ];
          do
            echo "Waiting for $EXECUTION_ARN"
            sleep 10
          done",
                  ],
                ],
              },
            ],
            "EntryPoint": Array [
              "/bin/bash",
              "-c",
            ],
            "Essential": false,
            "Image": "amazon/aws-cli:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "latest",
              },
            },
            "MemoryReservation": 64,
            "Name": "aws-cli",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSServerTaskDefinition35240CEA",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionTaskRole53DB453D",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSServerTaskDefinitionExecutionRole56B544B3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:test-region:test-account:repository/cdk-hnb659fds-container-assets-test-account-test-region",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSLogGroup73926EAE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSServerTaskDefinitionTaskRole53DB453D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "elasticfilesystem:ClientMount",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "states:DescribeExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:test-region:test-account:execution:",
                    Object {
                      "Fn::Select": Array [
                        6,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSStateMachine236A22ED",
                            },
                          ],
                        },
                      ],
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
            Object {
              "Action": Array [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionTaskRole53DB453D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSService95E677AB": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "LaunchType": "EC2",
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": Object {
          "Ref": "LowCostECSServerTaskDefinitionD959764E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "LowCostECSStateMachine236A22ED": Object {
      "DependsOn": Array [
        "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "LowCostECSStateMachineRole6D7317FD",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{"StartAt":"CreateCertificate","States":{"CreateCertificate":{"End":true,"Retry":[{"ErrorEquals":["States.ALL"],"IntervalSeconds":20}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"SendEmailOnFailure"}],"Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::ecs:runTask.sync","Parameters":{"Cluster":"",
              Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
              "","TaskDefinition":"TestStackLowCostECSCertbotTaskDefinition977C5973","LaunchType":"EC2"}},"SendEmailOnFailure":{"Next":"Fail","Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
              "","Message.$":"$"}},"Fail":{"Type":"Fail"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSStateMachineRole6D7317FD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "LowCostECSStateMachineEventsRoleAB571CF6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineEventsRoleDefaultPolicy71755946": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineEventsRoleDefaultPolicy71755946",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineEventsRoleAB571CF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSStateMachineRole6D7317FD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.test-region.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineRoleDefaultPolicy7D009A46": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        2,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        4,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        0,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    "/",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:StopTask",
                "ecs:DescribeTasks",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
                    "Arn",
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:test-region:test-account:rule/StepFunctionsGetEventsForECSTaskRule",
                  ],
                ],
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineRole6D7317FD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSTopicE71E72ED": Object {
      "Type": "AWS::SNS::Topic",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPublicSubnetSubnet1DefaultRoute8657BB78": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet1RouteTable54741E8C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet1RouteTableAssociation12F076E3": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet1SubnetC1C3749F": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnetSubnet2DefaultRoute27ACE0CE": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet2RouteTableC47A3F8E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet2RouteTableAssociation4749FF4D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet2RouteTableC47A3F8E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet2RouteTableC47A3F8E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet2Subnet2294BBD1": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnetSubnet3DefaultRoute76177F6D": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet3RouteTable53BC55FE",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet3RouteTable53BC55FE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet3RouteTableAssociationC9BC8F75": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet3RouteTable53BC55FE",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet3SubnetFDC17AA4": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Test snapshot of examples minimum 1`] = `
Object {
  "Outputs": Object {
    "LowCostECSClusterName647E1020": Object {
      "Value": Object {
        "Ref": "ClusterEB0386A7",
      },
    },
    "LowCostECSPublicIpAddressA02E4592": Object {
      "Value": Object {
        "Ref": "LowCostECSHostInstanceIp2CB96CE8",
      },
    },
    "LowCostECSServiceNameB1505605": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSService95E677AB",
          "Name",
        ],
      },
    },
    "LowCostECSStateMachineName718AB644": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "LowCostECSStateMachine236A22ED",
          "Name",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ClusterEB0386A7": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterHostInstanceCapacityASG6B791030": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterHostInstanceCapacityLaunchConfig812B5EE6",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
          },
          Object {
            "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
          },
          Object {
            "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(dict(event, ResponseURL='...')))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)

  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  """Turn an instance ID into a container instance ARN."""
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  """Fetch tasks for a container instance ARN."""
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  """Return True if the instance is running tasks for the given cluster."""
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']

  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']

  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  """Pick a subset of a dict."""
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionAllowInvokeTestStackClusterHostInstanceCapacityLifecycleHookDrainHookTopicF2E65AC531E91D26": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:test-region:test-account:autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterHostInstanceCapacityASG6B791030",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRoleDefaultPolicy8F439785",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityDrainECSHookFunctionServiceRole930143CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityDrainECSHookFunctionTopic0973DF5F": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityDrainECSHookFunction54F7233E",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterHostInstanceCapacityInstanceProfileD7C1621F": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterHostInstanceCapacityInstanceRole2FB29380": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityInstanceRole2FB29380",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF": Object {
      "Properties": Object {
        "GroupDescription": "TestStack/Cluster/HostInstanceCapacity/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          Object {
            "CidrIpv6": "::/0",
            "Description": "from ::/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIpv6": "::/0",
            "Description": "from ::/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterHostInstanceCapacityInstanceSecurityGroupfromTestStackLowCostECSFileSystemSecurityGroup3BACAC07204908F72F6E": Object {
      "Properties": Object {
        "Description": "from TestStackLowCostECSFileSystemSecurityGroup3BACAC07:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ClusterHostInstanceCapacityLaunchConfig812B5EE6": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityInstanceRoleDefaultPolicy594D7A24",
        "ClusterHostInstanceCapacityInstanceRole2FB29380",
      ],
      "Properties": Object {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": Object {
          "Ref": "ClusterHostInstanceCapacityInstanceProfileD7C1621F",
        },
        "ImageId": "dummy-value-for-/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
        "InstanceType": "t2.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
INSTANCE_ID=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)
ALLOCATION_ID=$(docker run --net=host amazon/aws-cli:latest ec2 describe-addresses --region test-region --filter Name=tag:Name,Values=TestStackLowCostECSHostInstanceIpCECE5013 --query 'Addresses[].AllocationId' --output text | head)
docker run --net=host amazon/aws-cli:latest ec2 associate-address --region test-region --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID" --allow-reassociation",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHook6243850B": Object {
      "DependsOn": Array [
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterHostInstanceCapacityASG6B791030",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterHostInstanceCapacityLifecycleHookDrainHookRoleDefaultPolicy35BCAE4E",
        "Roles": Array [
          Object {
            "Ref": "ClusterHostInstanceCapacityLifecycleHookDrainHookRole8F376286",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterHostInstanceCapacityLifecycleHookDrainHookTopic68232BAE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Cluster/HostInstanceCapacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "LowCostECSARecordrajyannet400EEAE4": Object {
      "Properties": Object {
        "HostedZoneId": "DUMMY",
        "Name": "rajyan.net.",
        "ResourceRecords": Array [
          Object {
            "Ref": "LowCostECSHostInstanceIp2CB96CE8",
          },
        ],
        "TTL": "1800",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "LowCostECSCertbotScheduleRule604ECD25": Object {
      "Properties": Object {
        "ScheduleExpression": "rate(60 days)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "LowCostECSStateMachine236A22ED",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "LowCostECSStateMachineEventsRoleAB571CF6",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LowCostECSCertbotTaskDefinitionAD2990AC": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "certonly",
              "--verbose",
              "--preferred-challenges=dns-01",
              "--dns-route53",
              "--dns-route53-propagation-seconds=300",
              "--non-interactive",
              "--agree-tos",
              "--expand",
              "-m",
              "kitakita7617@gmail.com",
              "--cert-name",
              "rajyan.net",
              "-d",
              "rajyan.net",
            ],
            "Essential": true,
            "Image": "certbot/dns-route53:v1.29.0",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "v1.29.0",
              },
            },
            "MemoryReservation": 64,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": false,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "certbot",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSCertbotTaskDefinition977C5973",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSLogGroup73926EAE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionExecutionRoleDefaultPolicy39733254",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "route53:ListHostedZones",
                "route53:GetChange",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:ChangeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
            Object {
              "Action": "elasticfilesystem:ClientWrite",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSCertbotTaskDefinitionTaskRoleDefaultPolicy222DE000",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSEmailSubscription5C24A57F": Object {
      "Properties": Object {
        "Endpoint": "kitakita7617@gmail.com",
        "Protocol": "email",
        "TopicArn": Object {
          "Ref": "LowCostECSTopicE71E72ED",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "LowCostECSFileSystem847967FC": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Encrypted": true,
        "FileSystemTags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/LowCostECS/FileSystem",
          },
        ],
      },
      "Type": "AWS::EFS::FileSystem",
      "UpdateReplacePolicy": "Delete",
    },
    "LowCostECSFileSystemEfsMountTarget1BBA308EB": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget2D5EF7BBC": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemEfsMountTarget3A37833C2": Object {
      "Properties": Object {
        "FileSystemId": Object {
          "Ref": "LowCostECSFileSystem847967FC",
        },
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "LowCostECSFileSystemSecurityGroup7C1A7991",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
        },
      },
      "Type": "AWS::EFS::MountTarget",
    },
    "LowCostECSFileSystemSecurityGroup7C1A7991": Object {
      "Properties": Object {
        "GroupDescription": "TestStack/LowCostECS/FileSystemSecurityGroup",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LowCostECSFileSystemSecurityGroupfromTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049FDC55036": Object {
      "Properties": Object {
        "Description": "from TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "LowCostECSFileSystemSecurityGrouptoTestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B92049E8C52016": Object {
      "Properties": Object {
        "Description": "to TestStackClusterHostInstanceCapacityInstanceSecurityGroup8BDF62B9:2049",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ClusterHostInstanceCapacityInstanceSecurityGroup99FA69CF",
            "GroupId",
          ],
        },
        "FromPort": 2049,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "LowCostECSFileSystemSecurityGroup7C1A7991",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 2049,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LowCostECSHostInstanceIp2CB96CE8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStackLowCostECSHostInstanceIpCECE5013",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "LowCostECSLogGroup73926EAE": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "LowCostECSServerTaskDefinitionD959764E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "COMPLETE",
                "ContainerName": "aws-cli",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "SERVER_NAME",
                "Value": "rajyan.net",
              },
              Object {
                "Name": "CERT_NAME",
                "Value": "rajyan.net",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Sub": "test-account.dkr.ecr.test-region.\${AWS::URLSuffix}/cdk-hnb659fds-[HASH REMOVED]",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "sample",
              },
            },
            "MemoryReservation": 64,
            "MountPoints": Array [
              Object {
                "ContainerPath": "/etc/letsencrypt",
                "ReadOnly": true,
                "SourceVolume": "certVolume",
              },
            ],
            "Name": "nginx",
            "PortMappings": Array [
              Object {
                "ContainerPort": 80,
                "HostPort": 80,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 443,
                "HostPort": 443,
                "Protocol": "tcp",
              },
            ],
          },
          Object {
            "Command": Array [
              Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "set -eux
          aws configure set region test-region && \\
          aws configure set output text && \\
          EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn ",
                    Object {
                      "Ref": "LowCostECSStateMachine236A22ED",
                    },
                    " --query executionArn) && \\
          until [ $(aws stepfunctions describe-execution --execution-arn "$EXECUTION_ARN" --query status) != RUNNING ];
          do
            echo "Waiting for $EXECUTION_ARN"
            sleep 10
          done",
                  ],
                ],
              },
            ],
            "EntryPoint": Array [
              "/bin/bash",
              "-c",
            ],
            "Essential": false,
            "Image": "amazon/aws-cli:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "LowCostECSLogGroup73926EAE",
                },
                "awslogs-region": "test-region",
                "awslogs-stream-prefix": "latest",
              },
            },
            "MemoryReservation": 64,
            "Name": "aws-cli",
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
            "Arn",
          ],
        },
        "Family": "TestStackLowCostECSServerTaskDefinition35240CEA",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSServerTaskDefinitionTaskRole53DB453D",
            "Arn",
          ],
        },
        "Volumes": Array [
          Object {
            "EFSVolumeConfiguration": Object {
              "FilesystemId": Object {
                "Ref": "LowCostECSFileSystem847967FC",
              },
            },
            "Name": "certVolume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "LowCostECSServerTaskDefinitionExecutionRole56B544B3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:test-region:test-account:repository/cdk-hnb659fds-container-assets-test-account-test-region",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSLogGroup73926EAE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionExecutionRoleDefaultPolicy96FB0053",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionExecutionRole56B544B3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSServerTaskDefinitionTaskRole53DB453D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "elasticfilesystem:ClientMount",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "LowCostECSFileSystem847967FC",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "states:DescribeExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:test-region:test-account:execution:",
                    Object {
                      "Fn::Select": Array [
                        6,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSStateMachine236A22ED",
                            },
                          ],
                        },
                      ],
                    },
                    ":*",
                  ],
                ],
              },
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
            Object {
              "Action": Array [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "logs:DescribeLogGroups",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSServerTaskDefinitionTaskRoleDefaultPolicyBDF632A7",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSServerTaskDefinitionTaskRole53DB453D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSService95E677AB": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "EnableExecuteCommand": true,
        "LaunchType": "EC2",
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": Object {
          "Ref": "LowCostECSServerTaskDefinitionD959764E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "LowCostECSStateMachine236A22ED": Object {
      "DependsOn": Array [
        "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "LowCostECSStateMachineRole6D7317FD",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{"StartAt":"CreateCertificate","States":{"CreateCertificate":{"End":true,"Retry":[{"ErrorEquals":["States.ALL"],"IntervalSeconds":20}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"SendEmailOnFailure"}],"Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::ecs:runTask.sync","Parameters":{"Cluster":"",
              Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
              "","TaskDefinition":"TestStackLowCostECSCertbotTaskDefinition977C5973","LaunchType":"EC2"}},"SendEmailOnFailure":{"Next":"Fail","Type":"Task","Resource":"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
              "","Message.$":"$"}},"Fail":{"Type":"Fail"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "LowCostECSStateMachineRole6D7317FD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "LowCostECSStateMachineEventsRoleAB571CF6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineEventsRoleDefaultPolicy71755946": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSStateMachine236A22ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineEventsRoleDefaultPolicy71755946",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineEventsRoleAB571CF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSStateMachineRole6D7317FD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.test-region.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LowCostECSStateMachineRoleDefaultPolicy7D009A46": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        2,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        4,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                            },
                          ],
                        },
                      ],
                    },
                    ":",
                    Object {
                      "Fn::Select": Array [
                        0,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    "/",
                    Object {
                      "Fn::Select": Array [
                        1,
                        Object {
                          "Fn::Split": Array [
                            "/",
                            Object {
                              "Fn::Select": Array [
                                5,
                                Object {
                                  "Fn::Split": Array [
                                    ":",
                                    Object {
                                      "Ref": "LowCostECSCertbotTaskDefinitionAD2990AC",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:StopTask",
                "ecs:DescribeTasks",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionTaskRoleA3330E00",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "LowCostECSCertbotTaskDefinitionExecutionRole7AD5609E",
                    "Arn",
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:test-region:test-account:rule/StepFunctionsGetEventsForECSTaskRule",
                  ],
                ],
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "LowCostECSTopicE71E72ED",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LowCostECSStateMachineRoleDefaultPolicy7D009A46",
        "Roles": Array [
          Object {
            "Ref": "LowCostECSStateMachineRole6D7317FD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LowCostECSTopicE71E72ED": Object {
      "Type": "AWS::SNS::Topic",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPublicSubnetSubnet1DefaultRoute8657BB78": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet1RouteTable54741E8C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet1RouteTableAssociation12F076E3": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet1SubnetC1C3749F": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnetSubnet2DefaultRoute27ACE0CE": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet2RouteTableC47A3F8E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet2RouteTableAssociation4749FF4D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet2RouteTableC47A3F8E",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet2Subnet2294BBD1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet2RouteTableC47A3F8E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet2Subnet2294BBD1": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnetSubnet3DefaultRoute76177F6D": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet3RouteTable53BC55FE",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnetSubnet3RouteTable53BC55FE": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnetSubnet3RouteTableAssociationC9BC8F75": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcPublicSubnetSubnet3RouteTable53BC55FE",
        },
        "SubnetId": Object {
          "Ref": "VpcPublicSubnetSubnet3SubnetFDC17AA4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnetSubnet3SubnetFDC17AA4": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "TestStack/Vpc/PublicSubnetSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
